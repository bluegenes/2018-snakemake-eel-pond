#! /usr/bin/env python
"""
Execution script for snakemake eelpond.
"""
# ref: https://github.com/ctb/2018-snakemake-cli/blob/master/run
import argparse
import os.path
import sys
import pprint
import yaml
import glob
import snakemake

def find_Snakefile(workdir):
    snakefile = os.path.join(workdir, 'Snakefile')
    assert os.path.exists(snakefile), 'Error: cannot find Snakefile at {}\n'.format(snakefile)
    print('--------')
    print('details!')
    print('\tsnakefile: {}'.format(snakefile))
    return snakefile

def find_yaml(workdir, filename, name): # args.configfile
    # find the workflow config or params file
    workflowfile = None
    if os.path.exists(filename) and not os.path.isdir(filename):
        workflowfile = filename
    else:
        for suffix in ('', '.yaml', '.yml'):
            tryfile = os.path.join(workdir, filename + suffix)
            if os.path.exists(tryfile) and not os.path.isdir(tryfile):
                sys.stderr.write('Found {} file at {}\n'.format(name, tryfile))
                workflowfile = tryfile
                break
    if name == 'params':
        if not workflowfile:
            print('\tcannot find params file, attempting to build from rule-specific params files')
            workflowfile = build_params(workdir)
    assert workflowfile, 'Error, cannot find {} file {}\n'.format(name, filename)
    print('\t{}: {}'.format(name, workflowfile))
    return workflowfile

def build_params(workdir):
    rules_dir = path.join(workdir, 'rules')
    rule_params_files = glob.glob(path.join(rules_dir,'*/*_params.yaml'))
    paramsD = {}
    for f in rule_params_files:
        with open(f, 'r') as stream:
            try:
                paramsD.update(yaml.load(stream))
            except yaml.YAMLError as exc:
                print(exc)
    paramsfile = path.join(workdir,'default_params.yaml')
    with open(paramsfile, 'w') as params:
        yaml.dump(paramsD, stream=d_params, indent=2)
    return paramsfile

def main(args):
    # first, find the Snakefile, configfile, and paramfiles
    thisdir = os.path.abspath(os.path.dirname(__file__))
    snakefile = find_Snakefile(thisdir)
    configfile = find_yaml(thisdir, args.config, 'config') 
    paramsfile = find_yaml(thisdir, args.params, 'params') 
    #if not paramsfile:
    #    paramsfile = build_params(thisdir)
    
    # open workflow config file # which programs to use, etc
#    with open(configfile, 'rt') as fp:
#        workflow_info = yaml.load(fp) 

    # run!!
    # params file becomes snakemake configfile
    status = snakemake.snakemake(snakefile, configfile=paramsfile,
                                 targets=[target], printshellcmds=True,
                                 dryrun=args.dry_run, config=config)

    if status: # translate "success" into shell exit code of 0
       return 0
    return 1


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='run snakemake eelpond', usage='''run_eelpond <workflow> <parameters> [<target>]
Run snakemake workflows, using the given workflow name & parameters file.
''')

    parser.add_argument('workflowfile')
    parser.add_argument('paramsfile')
    #parser.add_argument('-u', '--quantify', action='store_true')
    #parser.add_argument('-n', '--dry-run', action='store_true')
    #parser.add_argument('-r', '--read-processing', action='store_true')
    #parser.add_argument('-a', '--assembly', action='store_true')
    #parser.add_argument('-q', '--assembly-quality', action='store_true')
    #parser.add_argument('-u', '--quantify', action='store_true')
    #parser.add_argument('-d', '--diffexp', action='store_true')
    args = parser.parse_args()

    sys.exit(main(args))
