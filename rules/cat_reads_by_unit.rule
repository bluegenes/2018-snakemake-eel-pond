from os.path import join
from common.utils import combine_by_unit

def combine_by_unit_pe(wildcards)
    if not is_single_end(**wildcards):
        r1 = list(units.xs(wildcards.sample)["fq1"])
        r2 = list(units.xs(wildcards.sample)["fq2"])
        return dict(zip(['r1','r2'], [r1, r2]))

def combine_by_unit_se(wildcards)
    if is_single_end(**wildcards):
        r = list(units.xs(wildcards.sample)["fq1"])
        return {'r': r1}

rule cat_reads_pe:
    """
    Cat files: same sample, different unit
    """
    input:
        unpack(combine_by_unit_pe)
    output:
        r1=join(TRIM_DIR, "{sample}_1.fq.gz"),
        r2=join(TRIM_DIR, "{sample}}_2.fq.gz"),
    message:
        """--- Cat files: same sample, different unit ---"""
    log:
        join(LOGS_DIR, 'cat_reads/{sample}.log')
    run:
        r1_files = ' '.join(r1)
        r2_files = ' '.join(r2)
        shell("cat {r1_files} > {output.r1}")    
        shell("cat {r2_files} > {output.r2}")    

rule cat_reads_se:
    """
    Cat files: same sample, different unit 
    """
    input:
        unpack(combine_by_unit_se)
    output:
        r1=join(TRIM_DIR, "{sample}_se.fq.gz"),
    message:
        """--- Cat files: same sample, different unit ---"""
    log:
        join(LOGS_DIR, 'cat_reads/{sample}.log')
    run:
        r_files = ' '.join(r)
        shell("cat {r_files} > {output.r}")    
