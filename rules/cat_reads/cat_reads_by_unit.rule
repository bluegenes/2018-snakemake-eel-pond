from os.path import join

def combine_by_unit_pe(wildcards):
    r1 = list(units.xs(wildcards.sample)["fq1"])
    r2 = list(units.xs(wildcards.sample)["fq2"].dropna())
    if r2: # this could be an issue if paired files are intermixed with se files. Need to maintain pair order! 
        return dict(zip(['r1','r2'], [r1, r2]))


def combine_by_unit_se(wildcards):
    r1 = list(units.xs(wildcards.sample)["fq1"])
    r2 = list(units.xs(wildcards.sample)["fq2"].dropna())
    if not r2: 
        return r1

rule cat_reads:
    """
    Cat files: same sample, different unit
    """
    input:
        unpack(combine_by_unit_pe)
    output:
        r1=join(TRIM_DIR, "{sample}_1.fq.gz"),
        r2=join(TRIM_DIR, "{sample}_2.fq.gz"),
    message:
        """--- Cat files: same sample, different unit ---"""
    log:
        join(LOGS_DIR, 'cat_reads/{sample}.log') 
    run:
        r1_files = ' '.join(r1)
        r2_files = ' '.join(r2)
        shell("cat {r1_files} > {output.r1} 2> {log}")   # capture stderr to log? 
        shell("cat {r2_files} > {output.r2} 2>> {log}")

rule cat_reads_se:
    """
    Cat files: same sample, different unit 
    """
    input:
        r = combine_by_unit_se
    output:
        r = join(TRIM_DIR, "{sample}_se.fq.gz")
    message:
        """--- Cat files: same sample, different unit ---"""
    log:
        join(LOGS_DIR, 'cat_reads/{sample}_se.log')
    run:
        r_files = ' '.join(input.r)
        shell("cat {r_files} > {output.r} 2> {log}")    
