from os.path import join

def combine_by_unit_pe(wildcards):
    #if not is_single_end(**wildcards):
    if not pd.isnull(units.loc[(wildcards.sample, wildcards.unit), "fq2"]):
        r1 = list(units.xs(wildcards.sample)["fq1"])
        r2 = list(units.xs(wildcards.sample)["fq2"])
        return dict(zip(['r1','r2'], [r1, r2]))

def combine_by_unit_se(wildcards):
    #if is_single_end(**wildcards)i:
    #if units.xs(wildcards.sample).isnull().values.any():
    if pd.isnull(units.loc[(wildcards.sample), "fq2"]):
        return list(units.xs(wildcards.sample)["fq1"])

# how to handle failed 1/2 lanes? e.g. sample1: lane 1 has pe, lane 2 has just se (2nd half library fail)?

rule cat_reads_pe:
    """
    Cat files: same sample, different unit
    """
    input:
        unpack(combine_by_unit_pe)
    output:
        r1=join(TRIM_DIR, "{sample}_1.fq.gz"),
        r2=join(TRIM_DIR, "{sample}_2.fq.gz"),
    message:
        """--- Cat files: same sample, different unit ---"""
    log:
        join(LOGS_DIR, 'cat_reads/{sample}.log') 
    run:
        r1_files = ' '.join(r1)
        r2_files = ' '.join(r2)
        shell("cat {r1_files} > {output.r1}")   # capture stderr to log? 
        shell("cat {r2_files} > {output.r2}")

rule cat_reads_se:
    """
    Cat files: same sample, different unit 
    """
    input:
        r = combine_by_unit_se
    output:
        r1 = join(TRIM_DIR, "{sample}_se.fq.gz")
    message:
        """--- Cat files: same sample, different unit ---"""
    log:
        join(LOGS_DIR, 'cat_reads/{sample}_se.log')
    run:
        r_files = ' '.join(input.r)
        shell("cat {r_files} > {output.r}")    
