from os.path import join

def combine_by_unit_pe(wildcards):
    #if not units.xs(wildcards.sample)["fq2"].isnull().values.any():  # pe - se mix: throw err?
    #sample_units = list(units.xs(wildcards.sample)["unit"])
    pe_only = units[units['fq2'].notnull()]
    r1 = list(pe_only.xs(wildcards.sample)["fq1"])
    r2 = list(pe_only.xs(wildcards.sample)["fq2"]) #.dropna())
    return dict(zip(['r1','r2'], [r1, r2]))


def combine_by_unit_se(wildcards):
    se_only = units[units['fq2'].isnull()]
    return list(units.xs(wildcards.sample)["fq1"])

rule cat_reads:
    """
    Cat files: same sample, different unit
    """
    input:
        unpack(combine_by_unit_pe)
    output:
        r1=join(READS_DIR, "{sample}_1.fq.gz"),
        r2=join(READS_DIR, "{sample}_2.fq.gz"),
    message:
        """--- Cat files: same sample, different unit ---"""
    log:
        join(LOGS_DIR, 'cat_reads/{sample}.log') 
    run:
        r1_files = ' '.join(input.r1)
        r2_files = ' '.join(input.r2)
        if '.gz' in input.r1[0]: 
            shell("zcat {r1_files} | gzip -9 > {output.r1} 2> {log}")   
            shell("zcat {r2_files} | gzip -9 > {output.r2} 2>> {log}")
        else:
            shell("cat {r1_files} > {output.r1} 2> {log}")   
            shell("cat {r2_files} > {output.r2} 2>> {log}")

rule cat_reads_se:
    """
    Cat files: same sample, different unit 
    """
    input:
        r = combine_by_unit_se
    output:
        r = join(READS_DIR, "{sample}_se.fq.gz")
    message:
        """--- Cat files: same sample, different unit ---"""
    log:
        join(LOGS_DIR, 'cat_reads/{sample}_se.log')
    run:
        r_files = ' '.join(input.r)
        if '.gz' in input.r[0]: 
            shell("zcat {r_files} | gzip -9 > {output.r} 2> {log}")
        else:
            shell("cat {r_files} > {output.r} 2> {log}")
