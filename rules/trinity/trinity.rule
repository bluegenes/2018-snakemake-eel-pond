from os import path
from trinity_targets import get_trimmed_trinity_input

#include: "trinity_config.yaml"

all_trimmed = get_trimmed_trinity_input(units, base, TRIM_DIR)
LEFT = [x for x in all_trimmed if '_1.trim' in x]
RIGHT= [x for x in all_trimmed if '_2.trim' in x]
SINGLE= [x for x in all_trimmed if 'se.trim' in x]
LEFT = LEFT + SINGLE

def get_trimmed(wildcards):
    readsD = {} # note that this is missing the orphans from paired samples
    if not is_single_end(**wildcards):
        # paired-end sample
        readsD['left'] = expand(join(TRIM_DIR, '{sample}_{unit}_1.trim.fq.gz'),**wildcards)
        readsD['right'] = expand(join(TRIM_DIR, '{sample}_{unit}_2.trim.fq.gz'),**wildcards)
    else:# single end sample
        se = expand(join(TRIM_DIR, '{sample}_{unit}_se.trim.fq.gz'),**wildcards)
        readsD['left'] = readsD['left'] + se
    return readsD

rule trinity:
    input:
        #unpack(get_trimmed)
        left=LEFT,
        right=RIGHT
    output:
        fasta = join(ASSEMBLY_DIR,"trinity_out_dir/Trinity.fasta")
    message:
        """--- Assembling read data with Trinity v2.5.1 --- """
    params:
        #**config['trinity']
        # optional parameters
        extra=""
    threads: 4
    log: join(LOGS_DIR, 'trinity/trinity.log')
    wrapper:
        "0.24.0/bio/trinity"

rule rename_trinity_fasta:
    input: rules.trinity.output.fasta
    output: join(ASSEMBLY_DIR, base + '.fasta')
    log: join(LOGS_DIR, 'trinity/cp_assembly.log')
    shell: ("cp {input} {output}") 


