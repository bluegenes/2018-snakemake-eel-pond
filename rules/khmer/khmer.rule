from os.path import join

def get_trimmed(wildcards):
    readsD = {}
    if not is_single_end(**wildcards):
        readsD['r1'] = expand(join(TRIM_DIR, '{sample}_{unit}_1.trim.fq.gz'),**wildcards)[0]
        readsD['r2'] = expand(join(TRIM_DIR, '{sample}_{unit}_2.trim.fq.gz'),**wildcards)[0]
        readsD['r1_orphan'] = expand(join(TRIM_DIR, '{sample}_{unit}_1.se.trim.fq.gz'),**wildcards)[0]
        readsD['r2_orphan'] = expand(join(TRIM_DIR, '{sample}_{unit}_2.se.trim.fq.gz'),**wildcards)[0]
        print(readsD)
        return readsD
    else:
        readsD['r'] = expand(join(TRIM_DIR, '{sample}_{unit}_se.trim.fq.gz'),**wildcards)[0]
        print(readsD)
        return readsD

rule khmer_read_processing_pe:
    """
    kmer trim and diginorm with khmer
    """
    input:
        unpack(get_trimmed),
    output: 
        paired = join(TRIM_DIR,'{sample}_{unit}_.paired.gz'),
        single = join(TRIM_DIR, '{sample}_{unit}_.single.gz'),
        r1_o = join(TRIM_DIR, '{sample}_{unit}_.paired.1.gz'),
        r2_o = join(TRIM_DIR, '{sample}_{unit}_.paired.2.gz'),
    message:
        """--- khmer trimming of low-abundance kmers and digital normalization ---"""
    params:
        k = '20',
        Z = '18', #20
        C = '3', #4
        memory = '4e9',#60e9
        cov = '20',
        extra = ''
    threads: 2
    log:
        qual_log = join(LOGS_DIR, 'khmer/{sample}_{unit}_x_' + base + '.log')
    conda: 
        'khmer-env.yaml'
    shell:""" 
             (interleave-reads.py {input.r1} {input.r2} && zcat {input.r1_orphan} {input.r2_orphan}) | 
             (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} - -o - 
             -M {params.memory} --diginorm --diginorm-coverage={params.cov} --summary-info tsv ) | 
             (extract-paired-reads.py --gzip -p {output.paired} -s {output.single}) > /dev/null
           """

