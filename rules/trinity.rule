** IN PROGRESS **

#def get_trimmed(wildcards):
#    return expand(join(TRIM_DIR, '{sample}_{unit}_{end}.fq.gz'),**wildcards)

def get_left(wildcards):
    return expand(join(TRIM_DIR, '{sample}_{unit}_1.trim.fq.gz'),**wildcards)

def get_right(wildcards):
#wont work with mixed pe /se samples ...
    return expand(join(TRIM_DIR, '{sample}_{unit}_2.trim.fq.gz'),**wildcards)

# better to feed in from trimmomatic? BUT then how to make easily interchangeable with other trimmers/no trimming?



rule trinity:
    input:
        r1= lambda wildcards: units[units['read_type']=='pe'].loc[(wildcards.sample, wildcards.unit), ["fq1"]].dropna(),
        r2 =lambda wildcards: units[units['read_type']=='pe'].loc[(wildcards.sample, wildcards.unit), ["fq2"]].dropna()
        
        #left=expand("reads/{sample}.left.fq.gz", sample=["reads","reads2"]),
        #right=expand("reads/{sample}.right.fq.gz", sample=["reads","reads2"])
    output:
        "trinity_out_dir/Trinity.fasta" 
    message:
        """--- Assembling read data with Trinity v2.5.1 --- """
    params:
        outdir="trinity_out_dir",
        cpu="2",
        max_memory= '2G',
        seqtype = 'fq',
        # optional parameters
        extra=""
    log: join(LOGS_DIR, 'trinity/trinity.log')
    wrapper:
        #"0.23.1/bio/trinity"
        "master/bio/trinity" 
