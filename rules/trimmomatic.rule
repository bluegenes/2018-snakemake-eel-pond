from os.path import join

trim_params = readfilt["trimmomatic"]

def get_pretrim_pe(wildcards):
    if not is_single_end(**wildcards):
        # paired-end sample
        return dict(zip(['r1','r2'], units.loc[(wildcards.sample, wildcards.unit), ["fq1", "fq2"]].dropna()))

def get_pretrim_se(wildcards):
    # single end sample
    return units.loc[(wildcards.sample, wildcards.unit),["fq1"]].dropna()

rule trimmomatic_pe:
    """
    Trim reads from the sequencer by trimming or dropping low-quality reads.
    """
    input:
        unpack(get_pretrim_pe)
    output:
        r1=join(TRIM_DIR, "{sample}_{unit}_1.trim.fq.gz"),
        r2=join(TRIM_DIR, "{sample}_{unit}_2.trim.fq.gz"),
        r1_unpaired=join(TRIM_DIR, "{sample}_{unit}_1.se.trim.fq.gz"),
        r2_unpaired=join(TRIM_DIR, "{sample}_{unit}_2.se.trim.fq.gz"),
    message:
        """--- Quality trimming PE read data with Trimmomatic."""
    params:
        trimmer = (trim_params['trim_cmd'].format(readfilt['adapter_file']['pe_name'])).split(' '),
        extra = '' 
    log:
        qual_log = join(LOGS_DIR, 'trimmomatic/{sample}_{unit}.log')
    
    wrapper:
        '0.23.1/bio/trimmomatic/pe'

rule trimmomatic_se:
    """
    Trim reads from the sequencer by trimming or dropping low-quality reads.
    """
    input:
       get_pretrim_se
    output:
        r1=join(TRIM_DIR, "{sample}_{unit}_se.trim.fq.gz"),
    message:
        """--- Quality trimming SE read data with Trimmomatic."""
    params:
        trimmer = (trim_params['trim_cmd'].format(readfilt['adapter_file']['se_name'])).split(' '),
        extra = '' 
    log:
        qual_log = join(LOGS_DIR, 'trimmomatic/{sample}_{unit}.log')
    
    wrapper:
        '0.23.1/bio/trimmomatic/se'

